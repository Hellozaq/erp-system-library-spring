name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: biblioteca-api
          path: target/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Debug Downloaded Files
        run: |
          echo "Listing downloaded files in the workflow directory:"
          ls -la
          echo "Listing target directory:"
          ls -la target/ || true
          echo "Checking for JAR files:"
          find . -name "*.jar" -type f || echo "No JAR files found"

      - name: Copy initial images to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          port: 22
          source: "Uploads/capas/*"
          target: "/home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/uploads/capas/"
          strip_components: 2

      - name: Locate and prepare JAR
        run: |
          echo "Locating JAR file..."
          find . -name "*.jar" -type f
          mkdir -p dist
          if find target -name "*.jar" -type f | grep .; then
            find target -name "*.jar" -type f -exec cp {} dist/biblioteca-api.jar \;
            ls -la dist/
          else
            echo "Error: No JAR file found in target/"
            exit 1
          fi

      - name: Copy JAR to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          port: 22
          source: "dist/biblioteca-api.jar"
          target: "/home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/"

      - name: Setup permissions and environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          port: 22
          script: |
            if [ -f /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/biblioteca-api.jar ]; then
              echo "JAR file found"
              sudo chown ${{ secrets.ORACLE_USERNAME }}:${{ secrets.ORACLE_USERNAME }} /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/biblioteca-api.jar
              sudo chmod 755 /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/biblioteca-api.jar
              ls -la /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api
            else
              echo "Error: JAR file not found in /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api"
              exit 1
            fi
            mkdir -p /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/uploads/capas
            sudo chown -R ${{ secrets.ORACLE_USERNAME }}:${{ secrets.ORACLE_USERNAME }} /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/uploads
            sudo chmod -R 755 /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/uploads
            sudo systemctl stop biblioteca-api || true
            cat > /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/.env << EOL
            DB_URL=jdbc:mysql://${{ secrets.DB_HOST }}:3306/erp_biblioteca?createDatabaseIfNotExist=true
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
            SPRING_PROFILES_ACTIVE=prod
            EOL
            # Validate environment variables
            source /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/.env
            if [ -z "$DB_URL" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ] || [ -z "$JWT_SECRET" ] || [ -z "$JWT_EXPIRATION" ]; then
              echo "Error: Missing required environment variables"
              exit 1
            fi
            # Test database connectivity
            mysql -h ${{ secrets.DB_HOST }} -P 3306 -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "SELECT 1" || {
              echo "Error: Failed to connect to database"
              exit 1
            }

      - name: Validate and Repair Flyway Migrations
        run: |
          echo "Validating Flyway migrations..."
          mvn flyway:validate -Dflyway.url=jdbc:mysql://${{ secrets.DB_HOST }}:3306/erp_biblioteca -Dflyway.user=${{ secrets.DB_USER }} -Dflyway.password=${{ secrets.DB_PASSWORD }} || {
            echo "Flyway validation failed, attempting repair..."
            mvn flyway:repair -Dflyway.url=jdbc:mysql://${{ secrets.DB_HOST }}:3306/erp_biblioteca -Dflyway.user=${{ secrets.DB_USER }} -Dflyway.password=${{ secrets.DB_PASSWORD }}
            mvn flyway:validate -Dflyway.url=jdbc:mysql://${{ secrets.DB_HOST }}:3306/erp_biblioteca -Dflyway.user=${{ secrets.DB_USER }} -Dflyway.password=${{ secrets.DB_PASSWORD }}
          }

      - name: Setup and Start Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          port: 22
          script: |
            sudo tee /etc/systemd/system/biblioteca-api.service << EOL
            [Unit]
            Description=Biblioteca API
            After=network.target
            
            [Service]
            User=${{ secrets.ORACLE_USERNAME }}
            WorkingDirectory=/home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api
            EnvironmentFile=/home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/.env
            ExecStart=/usr/bin/java -Xms256m -Xmx512m -jar /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/biblioteca-api.jar
            SuccessExitStatus=143
            TimeoutStopSec=10
            Restart=on-failure
            RestartSec=5
            
            [Install]
            WantedBy=multi-user.target
            EOL
            
            sudo systemctl daemon-reload
            sudo systemctl enable biblioteca-api
            sudo systemctl start biblioteca-api
            sleep 60
            if ! systemctl is-active --quiet biblioteca-api; then
              echo "Service failed to start, checking logs..."
              journalctl -u biblioteca-api.service --since "15 minutes ago"
              exit 1
            fi

      - name: Verify Service and Test Endpoint
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          port: 22
          script: |
            sudo systemctl status biblioteca-api || true
            journalctl -u biblioteca-api.service --since "15 minutes ago" | grep -i "error\\|exception" || echo "No errors found in logs"
            if ! systemctl is-active --quiet biblioteca-api; then
              echo "Service is not active after verification"
              exit 1
            fi
            # Test API endpoint
            http_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080)
            if [ "$http_code" -ne 200 ] && [ "$http_code" -ne 401 ] && [ "$http_code" -ne 403 ]; then
              echo "Error: API endpoint returned unexpected status code: $http_code"
              exit 1
            fi
            # Test static resource (capas)
            if [ -f /home/${{ secrets.ORACLE_USERNAME }}/biblioteca-api/uploads/capas/sample.jpg ]; then
              curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/uploads/capas/sample.jpg | grep -E "^200$" || {
                echo "Error: Static resource /uploads/capas/sample.jpg not accessible"
                exit 1
              }
            else
              echo "Warning: Sample image not found, skipping static resource test"
            fi
            echo "Service is running and API endpoints are accessible"